<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tsai hank &#8211; White Hat Rhino</title>
	<atom:link href="/author/hank/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Between Attack And Defense</description>
	<lastBuildDate>Mon, 07 Aug 2017 14:29:58 +0000</lastBuildDate>
	<language>zh-TW</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.1</generator>

<image>
	<url>/wp-content/uploads/2017/06/cropped-rhino_words_9-1-32x32.jpg</url>
	<title>tsai hank &#8211; White Hat Rhino</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Broken Access Control 存取控制的破解</title>
		<link>/2017/08/05/broken-access-control/</link>
		<pubDate>Sat, 05 Aug 2017 14:18:26 +0000</pubDate>
		<dc:creator><![CDATA[tsai hank]]></dc:creator>
				<category><![CDATA[Vulnerability]]></category>

		<guid isPermaLink="false">/?p=249</guid>
		<description><![CDATA[什麼是Broken Access Control? &#160; 這裡可以看到wiki對於access con <a href="/2017/08/05/broken-access-control/" rel="nofollow"><span class="sr-only">Read more about Broken Access Control 存取控制的破解</span>[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>什麼是Broken Access Control?</p>
<p>&nbsp;</p>
<p>這裡可以看到wiki對於<a href="https://en.wikipedia.org/wiki/Basic_access_control">access control</a>說明，與OWASP 對於 <a href="https://www.owasp.org/index.php/Broken_Access_Control">Broken Access Control</a>說明，簡單來說，就是管理者設定好的控制方式被破解了，使得原本不應該被存取的資源被未受權存取了。</p>
<p>在OWASP TOP10 中，這一直是榜中名單，原因於被利用很簡單而且一但被利用往往可以直接存取重要資源，但要完整的防護卻不是那麼容易的事，往往是邏輯上無法思慮的那麼全面。</p>
<p>&nbsp;</p>
<p>我們試著用另一種方法來解說這是怎麼一回事。如下圖:</p>
<p><img class=" wp-image-277 aligncenter" src="/wp-content/uploads/2017/08/door-300x225.jpg" alt="" width="352" height="264" srcset="/wp-content/uploads/2017/08/door-300x225.jpg 300w, /wp-content/uploads/2017/08/door-768x576.jpg 768w, /wp-content/uploads/2017/08/door-1024x768.jpg 1024w, /wp-content/uploads/2017/08/door-285x214.jpg 285w" sizes="(max-width: 352px) 100vw, 352px" /></p>
<p>您是否有經驗，在全班去上體育課時把教室上鎖，就在大家都離開後卻發現…錢包忘在教室面!!而我們總能發現一個可以回到教室的窗戶，把自已的錢包拿出來，這就是Broken Access Control。</p>
<p>&nbsp;</p>
<p>在OWASP的解說中也提到，最常發生的幾個狀況:</p>
<ul>
<li><strong>不安全的識別(<b>Insecure Id’s</b> ) &#8211;</strong> 如教室的門窗都鎖好了，進入門只有一個辦法&#8221;刷卡&#8221;(Id)，因為這唯一的辦法，當別人撿到你的卡就能進到教室裡了。又或者厲害的人拿自已的卡片猜出能進入的卡號，如學號之類的，輸入卡片後也能進入。</li>
<li><strong>強制頁面流灠(<b>Forced Browsing Past Access Control Checks</b>) &#8211;</strong> 這就跟上面的例子一樣，明明大家都從門進出，就有人不理門那個鎖，直接去看窗戶上的每個鎖(每個網頁頁面)，看哪一個鎖沒有上，就能進入。</li>
<li><strong>路徑跨越(<b>Path Traversal</b> )-</strong> 這個方法蠻妙的，只要看到教室有人，不用進去，直接跟他講&#8221;請幫我拿第二排第三個座位裡的皮夾&#8221;，當他說沒有時，就說&#8221;第二排第四個&#8221;(不斷試路徑)不斷的嘗試一直到真的找到有皮夾的位置。</li>
<li><strong>檔案權限(<b>File Permissions</b>)-</strong>裡論上每個人都有自已的座位，抽屜裡的東西也只有自已能放能拿。但…這只發生在你正坐在座位前面，大家才會這麼守規矩，當你不在座位時，就是把抽屜的權限放出來，讓大家隨意使用。</li>
<li><strong>流灠器快取</strong>(<b>Client Side Caching</b>)-在電腦教室上課每個人都會分配到一台電腦，理論上這台電腦只有你會用，但當你要開GMail時確發現眼前的畫面是別人的信箱，這是因為…前一位同學沒有登出XD</li>
</ul>
<p>問題是，當我們碰上這些問題的時候這麼解? 怎麼防護呢?</p>
<p>很妙的事，當放在網路上時，我們的警覺好像就會自然的消失，在日常生活反而比較知道怎麼一回事，下面是我們建議的解法:</p>
<ul>
<li><strong>不安全的識別(<b>Insecure Id’s</b> ) &#8211;</strong> 當卡片中的ID可能被偽冒，那我們就加強防偽，如不要用學號、不要用流水號，以不可預測的亂數來當ID。但…別人拿到卡片還是可以進去!!那就讓驗證不只有ID，還要如指紋、密碼等多因素驗證。</li>
<li><strong>強制頁面流灠(<b>Forced Browsing Past Access Control Checks</b>) &#8211;</strong>這個真的沒有捷徑，離開教室前要了解到底有多少個窗戶，每個鎖都要上鎖。如果是網頁，往往是邏輯問題，確認需授權的網頁都有確認身份的函數判斷後才能使用，但問題時常在不知道有哪些網頁沒有判斷到，可以透過掃描、滲透服務來協助驗證。</li>
<li><strong>路徑跨越(<b>Path Traversal</b> )-</strong> 這個解法就是要讓每個同學知道，有人要問你教室裡有沒有東西的時候，不要理他、不要幫他找東西，要對的人(身份證證過的人)才幫他找東西。</li>
<li><strong>檔案權限(<b>File Permissions</b>)-</strong>原理很簡單，當你離開座位時，請清空抽屜中的貴重物品，隨身攜帶(確保該有權限的資源一直有權限管制)，所以定時去檢視哪些資源權限沒有設定好，最常以資安技術服務搭配驗證。</li>
<li><strong>流灠器快取</strong>(<b>Client Side Caching</b>)-解法就是要按&#8221;登出&#8221;，或必免在公用場所使用私資資源。</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
